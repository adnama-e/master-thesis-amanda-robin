node {
  name: "lstm_2_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 5
        }
        dim {
          size: 27
        }
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\033\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19674775004386902
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19674775004386902
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7217845
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 27
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\332\371\020\273\021\353\200=d\241\201\275v]\004>\002\030O>}\251@9\263\006\246\274\364g\225\274\"\217n\275.\305\025>\357)#\274\022\020\340=\004\351\346\275F\255\017>[7N\275(\221\377;\032\374\210=\016\265\006=n\257\340\274\200T\363\275,\2033\274\241\242L=\\\363Q\276@\031o\275\014\370{=K2\301\275\220h\355\275iM\023\274\371 \275;wg\227=\032\202(=^\244\245=u\316\232\275x\016\036<\345\266\233\275Y\370\341:G\014\016\2757\243R\275\320c;\275[sW\276\374\257\221<\311\210\262\275:]\233\2755$,>\272\277\254<\202\246\273<}\364\022\275\337\030\232\273\275/O<\223\366\023\275w;\2078:\212\033\276\331W\276=\310\374\233\275p\251s\275A=\363\274\240]\260\275F\037U<3\234+>\004\303\001<j6$>\007\277\013>5\251\311\274\217;\020\276U\261\330<\005\304\"=\247[\r\274X*\014>\037m\346\275\331\371\257=[\014\211<~0K\275\342\033\212\275`\372}\275ip\333=4\257D=\206\230\320;\326\326\343\275\221\030O<\006\007\263<\275h\026\273\014\001\021>\\\r\007\274xjK=\251\336\254<\374\344\357\274\026\307\013>\014\204=\273=P\241=,\017k=O\325Q\274\017\353\257<\"\311^\276\256\033\212=\007\021\335\275b\365\273\275\334\254\n=\266\317\255\275\361 \246=\036N%>\232n\'>^\211\373\275\263Y\010=Kz)=\330\004\245\274\221:\324=\274\3629\275\251\3031=`p\356\274eD\005\275u>\341=\201\213\\\276\006\t\334\273\033\2730\276\347\217\376=\006\222\213\275\t\311!\274\210o\211=)\253k<m\371\376\275\336Q5\276\242nr=\377\312\023\274\357\017\312<Q\215\244=\324\271\272\275J\2327=^\351\001>v\260\357=\245\326\301\275\223t\237=e\034\316\274\350\2421>\337hO\274\211q\n=\366\237\001\276\033\332\021\274\025\263\255=\343\242\277<\252\"\336=3h\030=\237\344\356\273\237\022\200=\330R\207\273\326\032\357=\275t\257\274,\274\257<\242\r\373\275\374\252\353\275|]\267=p\370\366<?\r\232=\r\203K\275\224\370\005<\371\030U>=\275\017=\366b\306<?mP=\260\r\202\276\230\021\337=#\234\244\274\221\035\025=\313\037-\2761\030H\276\216\356\305=\"\324=>\322\207T=\013\272O>\330\245\207\274s\006{=n4\337=\021\\\240\275\265\317\260\275zS-=\242\202A=\315\244\211=s]A=\337m\370=/\323\017\273%\365<\276A\316\370\274Q\326&\276$\025\237\275\216\313\315=\013\210p<2\370\315=S\371U=\017$K=\261\377\302=\351\010!\273V\035\332=\356B\362=\3557\006\276z\002\216\275\025?\275<Wu\274\275\260)\372\275\347\036k=V\333\007\275\366\251\370=\204\006\207=\304\004\261<T\002\222\274\203\252u\275\275\323\357\275\215\335i=\356\002-\275K\351x\275\277\007M\275\206\017\213;\213\202\t\275\033\230M=\177^\024\275Ym\006\276\004.\226=\307\341I\275\322\024\346=\242\t)\276\360d\200\274q\305\271\275g\215l\275\232o\345\275\246\334\254\275\332~\376<S\371\266\275\003iI\275\001\310o\274\213:\231\275B\0058\275\242\301~<\213\013\237\275\367;\024\276)]\312;4\005\373<\341\255~\274\222\032\337\274\023s\001\276\345\024\215\275\030\377\022=IB\334\275\314\270/=\212\237\203=\270\247\034\274\325\345\216\275\323K\345=\215\331\327=\324\234\311=\306T\216\274\t\031\330=\0235)=!\301\311\274\234+7>\303h\370<\025N\246\274\200\372H\274\030\313:=\036\326M\275\334\277\302\275B\266\261=\000\343{=\014\0131\276.\373\005>\023M\227\275\352J.=\003.\301\274\303\376\202=i\227\030>#\326)\275\"\260\245<\205\230\000>\242.\212\274\347\372\010\276d\'\220<j\005\234=\235\rH\274\022\240l\2755&\273<H\002\340=\023{\347<\312\353\014=\027\376B;\264V\270<VKg\275%\320\034\275\300\214\372<7M\241\273\226\203\001\275\206\303\305=\307\345\251=`;0\276\373\251\301\275IT\367=l\334\237\275\3076\270=TK\026\276\"t\234=\313\200\211<6\240\326\273;\224\245<\352\020\350<\000\273\234\275\231<\275\275\227c\217<\257\230\255\274TGf\275\251\373a\276\304\007\237\274\212\003\027\275\322\306\n\276\366\204]\275\346E\006>x~\202\275\253\247M\276\034S\235=\333\334\001=\303q\303\275[\356\350\273V\353\231\275\273M\242=*\177\027>\003\311\005\276\346\2313\275<\234\224<\264\267\255\274z5\336\274\201\374\316<f\214\314\274D~(>\363\031#\276\317Y\316=5\247\241=8\246\007>\364d!\276\203\324L>\351pD\275\371\036a=\210QN=:\t\362\274\232`\200=\205\274p<\365K\022\276\240\037\303<8\316);\357\315\214<\001\026\370=\350\333\231=\250\342\000>\"\331\357\275\331\354<\274\217\324\233=\256\277\234=rh\277\275\217\177\010\275|\226.9\251\363\n>\211\333\315=\033\363\207\272\257\322A=j\231\264\274a\022\317\275{_\016\276\275\360l\2750\315o\274%\004u<\224\371Y=\212\254)=m\202\354\275\024!\302\273_\214\340;E\340\000\276\276\270b>\256\266\024=\252(\220\275\020\354\375\274\214\327\033\276\355`\017=S\273\265\274\320\031\\\276m\261\207=\254a#=\343\021\346\274{\034_\274u\305f\275\027\310\200<\005\010\024>\216P?>\020\347<\274N\204y\275\217\210\232\275\346\371\330=Kn\307<\236O\032\275\r\030<\276>\331D>\216*\345;f\346P\275c\206k=\225\212\2439A\014S<\024G:=\241\333\314\274\367\024\021=x\026L>\247\261\027\2757\257{\275\024\350\225\275\315B\027<|^R=\267\324n\274\033\027)\275\251\r1\276\341\352\334\2750\014M<_8\346\275\270\221\360\275g\300~\275Dq\205\275/\307\224=\274v%\275L\017\254\275\357kC>P\307\306\275s\2127\274\215)\252\275&\301\016=\350t\200\275\307\266O\276\001\000\210\2755\224\346<hX0\275\204\342\217=\356\215\323=\321\205\311\274\277\267\003>\n\004\203\274\302\031\021>\201\270\274\275\'f\275\273\252\261d\2741N\213\275u\234\n\276\347x1\276#\356\332\274\232a\342<\226\330\234\272\317\325\251<\254\001c\275\265\273\234=\262\234n\276\2274\243=A\351\310<\214\312\245\274\017\207\213\275E\277\021=Yd\002=u,\026=\0355\336\275\370\362_\276#\257\277<\3037\024\275S\307\276\274#\252\002;]\343`=\304\346;=f\004/\276&\241;\275\'9\346<Q\364\226\275UL)\276\372\na=\035\024%=`\307\220=\223I\352<P\327p;\356\236\023>\356\333\245=\325\006\222=$=\r=\221(:=\'N\n>#\353\310<=Z\231:\340&7\275\322\367/\275=\r\271=\271~\205\275\261\032\332=\235\324\310\275\3157\n\276\034e\366=]_\237\275\037\267\004\27546\347\275\325=\335\275]\375\220=\330\t\016=| \211=\020\034\001=\275GF\276A\252\222=\010f\312\274\341As\273\222\350\274\2750\214\340;\226\331.<X\313\344\275\371\263\267;\252[\023=\332m\202<,\221\211=s=\226\274\270V\350=\277\203\274\274\225\3357\275\211\347@\275rv>\274\334oZ\275\032_\014>-V\372=\247-\202\275\250\322\004=\t\371\245\2756c\004\276\356x&\276(\240\376=\r\000\002\275K\336\024=\324?\215=\335C\260=\030\021^=\233#\326\275\365\"\222\274,\213\035=\315\222\006\275\225\247\315<\n\324+=@\004@==\332\361=25L\275\236\240\037>\026y\025\276\014z\327=\233\350M\275X.N=\225\307;=k\321\277;gB\016>\265\263\007\276\016\274\003>\356v\226<\207\310\206\275[\375\301<g\341\024\274\030\377\311\275\n\004\200\276\376:\001>8\024\347<c\231\316\275\240\366\362=\274KO=1\216\362<cD\245\275\014Y\226=\274\336]\276\"\335\021\274\345G\241=P\315\205=\326|l\274\r`&\275\311\374;=\202\317\244=\\Z\224\275*\014\344<\364C\332\275k\363:=0\222\242\274T\374\t\275A\324\204=T\231\232\274\324C\330\275*p\006\275\206\366\251=\244\360\000=\251y\034\274\250\357\365=\\K\234\273I[\237\275,\t\007\276B\372\250\275%\207\032\275\270(8\274\252(\003\276\255\333\002=i~0>s+->z~U\275\032\225\177=y\365\004=}\337\260=\234.\311=q<\007\276\300\206\247=,\312\256\275\303>\370\273\272\030\361=\270\360\326<\267K\357=\\,\225<R=(\275\352H\025\275\350\204\245=\022`3=j`\273;\362@N\275\352\260\017\274RV\274\275\035\256\335\274\270\217\257\274\256/E\276Qeg\275\300Q\305\275>\233\210=\211P\000\276\'x?<\2567\201<\232\2458\274\037\364\201<\306\244\326=\331\263\312=\254UV>\204a\205\275$G~\271Yy\363\273\006\351\211=XD\006\273\213\310\037\276\205\250\023>\334\241\366\275\020\356!>~E\341\275JR\375=7-@\274\337\205s\275\336O\031\276\'~\352<\023\332\310\275Oc\224=\3113\034>\370\350\224\275\266DZ=e\247d=\320\212L=^\271\014>)\021i=\346m\301=\242\317u=(38\275{\005\236<\021e\341\274\366\252$>\333N>\275\206\301\371\275\204\237\356=\206Z\'\271\263{\252=\310\001\023<\263\342\362=\224\262\250\275\226\351_=\237d\037\275\022\244\350\275\2276w=3\354\345=\231\002\302\272\274>\307\275\2454\362<\353|\261\274\236\233\271\275\223\357\t=\225\263\004=\000\242\322=\264-\222<o\250\024\276\003?b=\255\010\317\275\264\032\356<:K\301\275\232V\323\273J]\r\275\373\302\203\276S\312\247\275{\004#\275\240\367#\275\202w\333\275\311\324\321=\016<(\275z\"\322=K\264\353\274\204\311\252;/\247b<\342\305`={\004\357=}\252\247=\2775\273\274tNI\274%*r\274E-\022=\t:\037\274\231U\305\275\007\002\233\273\354z\036>l|\264=F\014\264\275s\315\t=5HP=ct\004\276na\026=\025u\351\275\350&*\276\320\243\274<\033\342T\275\256y+>7c\227\275\244\013\367;d\204\213\273\022\0026\274\020\220\021>\220\204\211\275\372\335\033\275\006\306@<jn\002>\010\323U\276\0220$\274\207\245;>o\375\230\274\331W,\272\313p\"\275\213-\240<6\324\034=\270\313\242=[E5\276l\316\374\273g\333T=\224\314\014>=!\222\275\354$L\275>\033\200;v\024\301\274ki\001>\211\264\311=.\377g>B\212\344=m\254s\275\333\334\005>{\271\010\276z\245\233=<\021\017\275\240\343\260\274\226\261\322=\234\375`:g\034\350\275\020\362\205=\',T\275\335\213\204\273\367\3051=\363\336\t\275\352\245\320\273\"\245*\276!\013 \276FFx\2754\340\317\275\005\222\204=\307[\217\275\010;=<\356\246\232\275\362\2436\276N\265\320\275\366\002\003>\032K\215\275-\304e=\367\242\263=7\342!=\230.\315\275\364P\243\275;U\023>\330\236+<\003\223\227\275 \t\333=<{\221\275(4\341<\342\374\267=9\013\244=/,3=L\214@=d\223X\276\007\352\021=\310x\207=\243\265\263\275c\211\365\275^c\300\275\276s\260\273\335\024\202\276-\275\274<\217\205.\275\225\257\260\275x\247\357=\235\005\214=\244\253%\275\230\031)=\014?G\275\222\002+\275\317\207\207\275\204N\246=Xw\225\274\215\214\272=*\027\263\275\362\245\300\275}s\003>\177[\226\275t\021a=\316\030M\274yM\"\275B\374\005\276y\350\026\276\025\0066=\306\227\001>\007\tP\275\357\330\367\275e\007\032\276\344w\361\275\345\261\265\275f\031\006=\'\261<;2]\'=\025~C\275Vc\014>\323>\r\276\374#]\275\014\310D>8\317\020>\2263\213<\245\370*>\224\316@\275\245.U\276\320\3546<\377\365\250\275\026E\002\275C\332\336\273\342\222\213=\364b\"=\231\377\"=\203\262\251<]\235\360<\326\303;=\375t\307=N\310\206<\336\342\036\275\220\367\025=:\321\006>E\243\333;\322\215\216\274Q \024\276h%\013\275C\267\351\274\002{>\275\0238\023=U\330\305\274\316L\002=4!\330\2757:\246\275\333\213\360=\277(\032>\377\316\225=\205w\333=\274x\337=\001t\033<\230sv<\226,\225\275g-\201\275\2774\343\275\203B\216=\356\2559\275\246\353c;\276\r\006\275\252\204\254=8\375\314\275|\273\034>\033^\330:jI\005=\301\242g=\202\327#=[\205\267\274\t\343\220=\033Z\306=\3059\002\275\034r\360\274\324\367\240=\215B\274\275\365\264d\275\245\327:<\013w\021>\nL\335\275\236\357\036\276\203\017\257;\265<\033>\223\001\013>\036\267\275=G\211-=\343\022\351=-,Q<\210\221\\=JGa=|\370\300=\236\366\244\275\264t\200\275K\034\260\276p\3617=\272=Q=`k\033=|c\342=\351\372)=\227\325n=\003R#>:\002\373\274\346\302\333=\377}\345<n~n\274\311\020\277;*\014\272=GQ\300<7\344\251=\266\033\247=`\210a=\350T\000=\367I4=\025\005\371\274\251\223\247\274\276\3751\276t\031\316\275\250\322\000=df\241=\"a\256\275\323b\013<\256&\357=\326\301\237;\366\277\253=\';X=\355\323,>\241\033\275\274\375\221b:J58=\033\355\n\276\2032\372=\207\272j;\",(\276\004D\367\273\036\250\255<b\034\355<7!\242\275\260\211\202<\202\371\366:\003\301\364;\324\303E\276l\223\033\275\242\212L=\246s\322\275\002\024+\275\352K\250=A{\201=:U\233<\231\026r\275\177\025\031=V\320\202=\374Ws<\324\002\353<\203E4\274r\322\335<\215\247\033\275\351\001\211\275\0305&\276a\332~\276\237\201\240=f1Z=\236\320\374\274\315\020\301\275w\326i=\010\277\251\2753eW\275`B\325=8\037\305\275\364b\210=\273S\361\275\232\010b=\344\363\257=\036\302\316<\022\030\265<4\302\352=\216\300N\275W &\2756\222\212=\255U\031\275d\346*>P]\256\274\261\320\203<\"\017\016>%\032\214=\031T\025=a\306\245=r\337\321\274+\370 =(\213\205=\330mA\275\261|\221=\234\335\221=\242\267\203=p\032\302\275\377\327\002\276sx\230\275nh\373=\371\224\037=\254(L\275\265\230H\276\213A\275\274\261\320\020\275h\273[\2748\002$= \350n=\207f\234=(\341&=C\337\032\275\364\004\024\276\272\221\t>>J\345\274\304\037\263;w\211a\275\220AI>\270(\375=1X\305<\026G\224\275\232\336\004\276\340{\177\275<\n\031>\221\212N>\314\263\034=[\003p\275\374\231U=:T\313=rm\230\274\377\023V=?%j\275J,\367;\0020\010>\017\325J=y\037\340<\367\364\006\275\240jk\275\325\363\004>U\017\211\275\215_V\276\257\\.=?\247|=\035\377\n\276r>\3659\327`(\275\324\327$>\344\rp\274\276\257F\274\200\303\304=\300\242\300=\0008\004=s\034g=\200&\221\274\013\203\010>xI\232\275j\301W\274\330\313\200\275G\335\362;<gq<\342\256T\275\304\'\027\274\352&\275\275\203Y;>\357\360M<\202\266\327\274A\\\037\275]\335=\275\002\224\310={\312\305\271\2772w\275J8\026>\331Y\250=\222\277\014\276}Kr=\205~\340=\2458E\2756\335\232\274\273\366\270=\220tQ=Y\017\260<\344\301\227=\315\365\004>\355\031\255\275A\"\321\274\327aa=\374FG\275<)~\274\022\t`=\212\006\000\276\304L\307\274\235\361\014\275B\033A\276xf\241\275\221\261\263\275\341+\013\276\343\017\344\275\335|W\275\010\271\273;\260\3231<\372\316\325=\300\027\027>pi\331<+\225$>\265m\254\275\034\'~\275\004<\257<\306.*>\211\332\264=\3724r=\007q\222=qw\341<W\206\274<8F\014\276\275P\371\274\036\222\217\275\203\022U\275t\322\271\275\303\257\003>^l|=\246\242\352<\301\362N\275\260~\212=\211\242\352\273\377\314\341\275\264x\010\276\036\337\002\276\364\235\000>\273\227\'>\303\255\004\276v\345\352<\304\371\241\275\345\204\334\275\003\372e<S\005\027\276\273\023\r=\321j+\276\306\246\363<\177wC>\311\311%<\201\001C\275\251o\t\276i\'P\275\372\030Q\274\324\027\235=\362\353\006=\211\361\262\274L]&\2761\257\203=\324\034G\273I[\027=\233A\245\2753\253\332\274%\302\2049\254L\223=\037\302T=^\363E=N\374\225=]\270\217\275\024\020\314\274/\200U\276(Oc\275C\001\177\274M_\336;\245\316\017<\272\274s=\216iU>\027\233,\275^M\'\276,\006\271=7\276\232<\244R=\274x\016}=*\342A\276;\023~=^\220\212=rg\215=\rw8<\212\326\017\276\364m\001\275\372Bq\275}\373\216=T\356\027>V\322\003>\006p\240=\231i\221\275\227\275!=;\325\001\276\327n\364<\001\352Y\275\\\351~=\341z\344\275\253N\247\2742N\234\275{*\215=\330\225\276\275\203\224k>\243\370\247\275\212\222b>4z\213=)\233.\274\362\367\304\275\2007;\2753X}\275\324\020K\275XE\360=\356I*=\217l\316\2749\006\265\274\256\372\204=\213\275\013>\214\2121>\034\324\036\2710\266\"\276\341Ur=\201\270\364<n\302\016=\277\346\334=\370\343\271\275\005\270V=B\034H\274\271\344\027>\033\243\302\275\034\301\207\275\210.\367={t\214\274\006\035\177<v\312\250=P.T\275\351\310\351;\260\220\203<\321k\007\276x\213a\275j#\220\2757\035\307<\027\325\311=\336\351\264=\323\201\002\275\3347\"\276\225-\242\275+*\224\274\026\337`\274x\313\327=\265>\266:~\021\313\275\340\t\017=\304\223\273\275}\346\342=\245\272\215\275\206\n\364=\311Y\213\2755\354/=\3758#<\376\362\013==\013\027=\203\003\037=T\236\355<\027\202s\275\307\225\303=i,3=\210\233\274\274:\002\026>\000\002\220\274/\'\275:\201\346\035=\204\002I\275\274\275\004\275c\036\273\275\001\334\263<\027M\201\275 w\022\275\376\251\226\275|>\025>;\227\013\275\021%u<\227\274K>*\004\340=\'\243\265\275\274?\366=\252\320\220\274\253\310[=\212\007\317;\002\360a\275\262\002i\273B^\364<\224|A\275\374\340N\275\013(K<\340\300\371\275\344 4\276r[\033\276\3477[\274\017\247\315=\251\030\211<\224]\257<\265\237\307=I\231\264\275\360[\222=\274\342f<:3c=\262\313\233\275lf\272=\241\367w\274\255\301o=*f\256<\327!\250=v\216b=\246J\200\275\3328\325\275A\032\301=n\344\344\275\346\331\030\275e\204\003\276/\372\272\274t\326\234\275\260\337\215\273\010\265\221=\222[\024\274\304\t\004=\366\353\222\274\202P\r\275\036\221\016\273r\311\262\275F\301$>\367\340o\275\353\310\215\275\202{\311=\263\344\006\275\030\253\275<\264\016\362\275/&\241\275\241\310\252=]H\254\274\242\332x\275\355\371\003=T\210\271<~c\204=7@\206\275\346s\311<\255o7\275!\016/=\274bD\276_\2513\276V\223\361\275bo\026<\263\333_;\251@\222=\237p\273=\204Xa=$y\272\274\316\216/\276\241\224\254\275\337w\375=\234\\K=\365\322\210\275\024Da;\310\254a<\371\231b\274R:Z>\253\312\274=X1\257=\224;\236\275\006\033\234\275Y\276@=\ne/\276\'B\352\275@\323\247=\321\251>>\\\372\237<Sp\t\276\211V\"\275\261\002s\275\224\003\232\275\311\233n=O\247Q\275\010\372t\2761\007\005;\266F\241<\002\376s\273\242\372~\275\364\214\002> \026\341\275+\241>>\007\312\233=O?Q>B\263\314\273\324\\\030>v\230\013\276z\367\001\275\221\036\277\2744\305\200=\241\252\001\276\371\236\245<\007\027\336=\037\226\225=$\267\324=\\\322\261\274\370\2671>\002m|<g\302\024>y\253A\275I\022\273<\177\260\340=_\255\274\274\373\207\320=\211\262\305\272\224\242\207\275\313\314\016\276\361\305\234\275\212l\205\274\202\033\\\275\300\273w=\311U:\275v[\273\274\"pI=\313\036\254=\345\313\025\274\221Sg\274\325S\223=\363\227\017\272B9%<#\023\344=\276\233 ><<\002>\204\013\307<Oc\027\276\333\223X\275\306++=nq\266=\024\036J<B\035\362=\025\336\217\275.x\036<\\\265\326\273[\\\031<\"%v\275u\361\317= \252p\273\036\315\217=)\326\001\276\224\252\202\274\303\267]<\251b\032\275\275\020\342=\267\376F\275mqR\275Y\003\002\276\327A\026\276\303\227~9\222\257\275\274\352\346\r\275\221gg\274\021\220\263\275\r(\263=\001s\317\275\r\261\004\275\3239\223\273\257\244\343;t\232\264\2758\rk\275\2346e=\357\250\037\275x\213\014=\222^\275\275\014\003\016<\221\356E>Y\262\013>\246t\317;\306\237\010>\224b\221\274\375\036\035\276A\220?>\321\007\345\274\225\020\244=\304\355r<\370j\365<\263R\037\276\343\"\360=\234\314\205;w\221\211=\210\356&\275\346\273\374=B\006\347<hU\275<\266!\230\275@L\007\276\236\303\363<U\2040\275p\337\331<+3\272\275-b\266\275z\3653\274Y\372q\275\245\324 >\204\252\252<\260\221\200\276Qe4\275o\354\224\275\315\246\240=\243Un\276+\314\262\275\342\351\210\275\025R\326\275a\221\243\275\337\006\213\274\360G\332\275pw\027=\030\267\364\275~s;=-c\204\275;\205+>\244\240`=0\371\206=g\371\343=e\352\014>\010p\343=w\357\362;\334i\024\276\265\300\377=!\332\260\274\257\317\031\276\035^\374\275\373\363\252<Q\007H\275\020\022\271\274c\362K\275u\n\022>\227\256W\273\240\305\014>\217\000t=^%V\274tXF\274\007\353\346=B\346D=\366d\037=C\255#\276_\366\206=\332V\231<9S\024\274\205\215H\275+\216\000\274\236v\341\275\344I\324\274\010\320\265\275\241@\265\275\221n\274<\277Y1\275b\231]\275\372C\301<\177\250u;P\017I=[V\037\275\363\352\020\276!(\377\274\312v\n>\013L3;\3241\354<\001SE=\237\222\253\275jN\232\275\266\345\311\274\002Q\364;\270\367\355=w1\010\275\207\017\016=\274\225/\276\016\016x=\217\227\216\275\354\236\037;3\325\354\275\271\247#=\254b\336<\343~\220>A\325S\275)\221h=u\230\332=\355\207\177\275\\\341\211\2763y\221\275\216\023C\276\021\216\033=\007\013\021>\"l\277\275_\342\022\274\331\023\362=;8$9\006Q\016>8\236\217\274\240\333\277=\267\350C\276\"\271\237;C\333\200<\241\253\271\275$\273\255\275\353\271\025>#\322^\275@\304\221;\274^(\275c\350\225=\335\227\334\275(\234\267=\327\324\227\275r=\350<R\216\223\275$\356\006<\376\247\226\275T\333\340\272\313\2662<\002\331\r\275\n\235\211\274\021\213\362\275\337<\204=\020{\342<\235\324\310\275w\033\t>U\204X\276\250\233\204\275\214\027\361\274/\000\026\275z\374\000\276\270\034\341\275\352Ow\272\262(P=\300\212x\272WU\230\275\3377\301=\241\3025\275\3172\266\275\201\367\245=%/\225\275\362\323\322:\317\356\257\274z\000,\275\211~\000\275\243\037\007\275Y\006U\275/(\277\274\320\016\373<\215\314\003\276\004K\333\275\234\316\237=\324 \021>nuh\275\031\247%>\200\325\253=\366\327\334=\340\214\305:\326\221\203=\376u\303\274\000\366\321\273-\354\250\275\264*\304\274\006\224D\275n~\312=\\\234q\273\266Kk\275\321\204\213\2754\354\226\275\264\214\327=\372\271\317\275\376\252)=\317\350\260<)\nR<\201>\254\275\025\205\321\274\373Q\033>\303\032\\=\315W\t>i\373\013\276\262\310)>q9^\274\275\226\252<\373\037\004>\010\225\306=\004\266\230\275\226\222\n=4\366\300<\377\344\253=\370\254\233\275\201\331\003\276\202\2176<]\337f=\343^\333\272\237V\331<\222w\310\273\353h\001>\013\342\342\275T\324\236\275H|N\275A\004V=\267\024\035\275i\246\306=\370\250\374\275\374\273\240=\331t\207=\230\312\315=\303\237;\2768\205!\276\003\1773\276\216-&\275\306]\344=\364\260\025\276e|\357\273\327\350n\275\370\022l\275R\221@>SB\275\275\371\003\236\275\311h\306\274\244\255\211\275\t\325\237;\304\003\310=\301\256R>\260j\246<\373\342\177\275\243\000\256=|\214\377=\005\n\022\275\320\371\242=\220\220\022\276\220\204K\275\336\272\205=N)\373=\025\002{\275\033\035\265\275&\221\227=M\367\221=+\246\'\275\357\tg\275\t\333U=\255\333\026\276\346uy;\213$\206\275\303\370C\276\2275\013;u\372\221=\321\262d\274er\347=n)\206\275\346B\002\276\323\327\305\275\0322\210<\316\026\375\275!+\001\275\215_\247=\020g\"=\270\013\206=\032\203\243\274@m\033>\357\265\000\276\226\204\204\274\277\357\236=\337\255\r=\270f6\276\355\252\211=\210%\266\275\346Om\275\344\225\300=\306\n\343\275\244\235\035\274_q\267=iL\250\275\236\201)\276\032\276K=\265\275\343=8\037\241\274W\202\227\275\334b\027\275\003\017\236=\327\345\270;\230H\207=\233\346\311=zI\"=\222\357\032=I{?;\\\235\351=\t\004 \275f\2534<\220\3465>a\353\222<5\304\037\275\347\316\201\275\361p\321<\246\264\r=\237H\370\275QC\237<\224Nh\275\263F\312=T^r\275\272\3167\276\336*F=\244\232Y=\032C\217\275H\236\013\2737\272Z=\255\017\005=\313\007\037\275\316\275E\276\351\273\024\276B\246\001\276?\250X=\221\252\266<>\345\276<\341\304\027>\304\225\241\275M\346j\275\005\247\033>\250\300\316=\300{\274<\004\243\230>\256\000\222<~\310\273=\277,A=\273\331\377<\361F\021=N\300\231=\2737\\=\254\033\210\275\322\250v=\227\235\030>4y\004\276\335d\364=\223\025\330\275\321\025\217<:\363G\275D(\014\275\342e\357\275\217\264\005\275A\0325>\231\200\"\274fw\016\274\234\250\200\275\336\302\254<\377>\271=3d\371\275\306\367\022\275:-\021\2761\005M=\300(\255\274\340\007\320\274\254b\245<\273@\353<\024\342\024\275\301r\233=\023b\322\274\215\227\003>(\257\035<\262Y\205\274s\023\266<E\023\332\275W\2051>C\036\007\276\200/\367<\031\224\273\2757\337w\275E\265o=\316L\251\275\014\360\002\276\324\324\211\274\036\353\355=\247\207\340\271\305\032\356=\312\250\021>\256\221\033>\026oC\275.\350\240\2752R9=\273Q\214=\341\267$>p-\016;g\374\207\275\274M~\274\227\373\231<\000\024\022:\330K\230\2757\363\020\276F\230\214=)\342\323\274ro\326=>\006\345\2754\311^<\030\342w=?\316\307\275l _\275\353\220@\276\255*\366\275Z\010\022=\244\264\220=\036h\311\275\345\237\214<\370y8\275\027\314\344=h\346\254\275\037\313\016>\250\200.<3\334\243<|\376\226\272\355QS=\213\267\310\275\242\300\373\274\313\010C=\376\224Q\275\212%\021\275\026\335\252=H\374\356=8\371\020\276\243\226\023=\005\271\226:\241\270\371\275\217\350O\274\347\270\013\275\2103\031\275\212Y\306=\235D\230=\254T\243\275K\351\264\273\246\252\273;\022\263\267\274\326\226\256\275\263\"\327=l\021\204=F@\000>BU\341=\261\025\371=\006\220\320\275\013\217K=\026.\357=\303\003\217\275\226\'\242:\001\371\022\275%G;\275w\3414>65\374\275\241v)=\341\206\213=\322\360p=\266W4\275S\327\210=0YX<Y/ >p\005\273\273\371\372\200=\232\323\240\275\330g\327\275\301`\326\274\250&\216\275\272\373\251\273\264\273\236\274xp\352=!;\331;K\375\336\274Ba\200=\220\265\273\274\213\325\035=\031\0243\273\004[\267\275&\364D\275Pz\016<CN\277\275 )\201\275#\234$=\376\251\351\272f\003U\275\354\225\303<\177=\220\275\233\004v=\367\017\233\275k\377|\274r8*\274yX]=E5\241=c\325\314\275\275\353C\276Wu\235\275\300\331%:\322\031P=\302\207\n\276\006\320\321\273L\0240=\227\325\360;\361\242\204\275\215\3378\275I\032\356\275\374\354G=\300\021=>/J}=\301\r\251<S<u>\356\245\331=\024\035@\275\314\266B\276\356\244N=\023\344y\275\341\221\242=\227\3729<\242T\214=\300J\215=\251x\206=K?v<\0168\'\276\200\3028=\003\362{=\206b\226<e\201#>f\017\r\276\203*V>A\210\033\276\227d\354<8\2600>`\024\222\275\200\302(\275\233\002\344=\274\240\260=\313\307\256<\3661\025>\214\326y=B\003\242=\3316T\276~V\032\275\276\327\216\271.\203\266=x>\373=\367\004S\275\245j\261<\247\241\000\276-\300\352;\234\351\037>XA\225=A\000\351=K\'e\274A~ =\271\034:=\\\330\231=\226S\341\274 \212\224=!dX=z\222c={\307\307=^\335\027<\035P\365=\023\275~\275M[\213=\300\206\204=-WC\275\340\332\235\2759\000\010\2769\242\004>\246\001\333\274{\005\221<\215EA<\300)\246\275\010*c>v\t\242\274\270+G\275\024\372\237;3\245\013>T\262\247\273\240\231\226<\315!\026>\033\rx\275\023D\363\275~\340`\276a\034\004\276\005\337[>\371U\306\275\344\t\">V_E=\345\264+\276\0201\342=\367\351d\274\337\374\026\275*mh\274f\240\216\273\337\222\035<r\332\247<\315x\203\275\274]\211\275\357\026\250\274A\2114\275U\262M\275^S\326\275\004\033&\2746\316%=\\\226y\271\200\320\356<h\304\276=p\236\315\275g\364h=\236\331\317\275\227\007\'\276\375\262+=\241\306F\275\331\'\240=\221\001\276\274N\337\030=\232\334e\276k\365S\275\037\003\347\274\314\2312<p\264\275=\217\tX\275\"\225\341\275<mF\275:\214x\275q,\330\2758\273\214=z\300s=\201\274\206=[\031\311=g\016\363\274k\3662>$}\030<\220\t\227=^\212\262=%\374\341=-?\235=\023v\351=N\244\250\275\026\377\326\275c\362\240\275\325\242\263=m\365~<;0G>\365\311\227\275S\270\t=\217\347\346\275\345\3559\2761\206\375;\215F\037=]1\266<\355 %</\344\016\274\330d\211=\321\247\300\275\247\366`=\236\024\273=M\310\312<\225|0=2{\357=9\0004\274\317\251\321=<b\221;=\366b<\344X\272\275\300\247\306<C\374\177=E\270$\276\223\000\027>\023\225B\274\010K\230\275\002\363\320=\321\007\365<Hv\242\275NQe\275d;\230<\020\326\021>\014\036t=\325<\360\275\336;x=5\024\252<\237\323\205=`\305\336\274vQ\330=\303-/=\242hx\273\'!\347\274\023\366F\276\204\237\222\275%\313\247\274z\220\\>\220M\240\275\323@\017\276\n\014\345;\330\356\337\275K\1773\276V\305\310=\356\220\002\275*q\'<\tk\316=0\313\322\275O\010k=\004\275\306\275D!\212=\337\325V\275\216\005\223<\267\027\203=\240\227\335\275\220\310\374\275i\251\343;\267\204\264:\323\026k\274~_k:\344\212\022\274p#\007<\035\377\225=!\203`\275C\211\273\266\304\363\302\275\202\336\032=\2212\320\274\230!\177\274\272O\373<\277=\341\274\003(\370<\372\2209\275/-\007>2\263\366\275\254g\211\275\376\251P\276s\0370\276B\372\016\2744\265}\273kk\032\27571\361\275\2142J=\r\031\367\275qG\227\275\376a\226\274\253\212\004>\342\177&;e\037\254\2747\267M=\244[\367\274\362\353\261\275h\336\253\275\300\275\214<\233\200\202\274*4@\274\222OW\274\332S,\275\200\006\222>5\275\361=]q\033\275\2049G\276g^\200\276q\\\247=pD\244=\234V\001>\276q$<\010\303\372\275\217\347;=h\205\256<\346\251\264\274\024{\352<l#\244<\230\246\225\275\357\211\301\275]\245\240=\3142\365\275\375\340E=\2128\347=\354u\016\274\230\204\341\275\266\231\317\275\346\331G=y\301\272\275\301\262\307;$\021}\274\224Vi=j/2\275\'x.=\327*\251=<N\007>\r\312\253\275c\215\365\274\334\351\016\275\305\373\235=\210c\306\275,\310A\275\243\262\306\274k\342\213\274c\273\031;\370I\217=\253\343\367=rH3\2751\222\017:\335\350>\2741\255T=}OL<\303yM\276\344\272\"=\333F\355=>\037\237=\201Vs\275S\003f\276z\252P\273\3235\273<z\000\330=B\3319=\253\226\277\275\031Z\261<\240H\205>P3,=}\3150\273x^\334=(\341\324\275\232UD:\034\202~=I5\331=z\264\334=`\017\"\275\265\024\020>n\313\267=\200\330J<\013\221\364;d\t\027\276\032\220\305<A\024\302<\203ZB\274\226\034A>a\216/\274\035`,\276\334\033\212=\354\312\246\275\217v\362\274/\213\322\274\236\327\367<\257s\350=\320\324?=\324\271R\275\354g\306\275.k\314\275\270\246\346\275o\"\005>U\212\035\275\017o\303\275\274V\376\274\354\305\024={\002\244=\356k\273\275\024\205\"\276\340\354\360\274G\211\030\275\275|\373<\030\007\372\275\341\033\243\274\314|\346\275b\363\371=\022\341\"\275u\213T=Q[\271=\032U8=\303\257\201<\267\"\244\274\031\202\020\276S[\007=\333\376\235=\020~\033;\000_\215=O\3520=\202\315\024>\201+j\2757\226\023\274]\274.\276\364\332\336=D\264\351<\324\277\240=\252\'\032\275\252\254\257\275+\306c=\310\335[\273\201\205\241=\353S\026=5\317\"\276{r9\275\234ML>\365\241\003=\200\270j=Z51>+\030@=\3342K>\002YN=I\377\265</B\352\273\367\374\352\2745q\036\275\261\361`\275A|\257=q\325\027>z\220\301=@i\022\274F\377\245\275&%.\276\034\2250=G\025\213\275|\275\243=\230\213\202;\205#\002\276\241\264\037>\261\252\022>\0172.=\036c\267<\220G\376\274c\206\250<\266\246\025\276\266\376\337\275Y\347\213\275|\341o=u\265\310=\314\270\324\274\001\016G\275\231\325\322<3M\004=\267\2741\275\034F0\2737\262y\272f\376\2578\372M\226={w\001>\202\320i=\340\346\324<\375 \234\275\205\332\013<wZ2>\373\373\'\275\016kR>\316\262\213\2758$\200=\317\275\033\275\312\256c\275\215\303<>\"\232r=\te\n<\035\320\346\275\025B;\276\rI*<\331\024\022\274\241(Y=\351+\023>D\017{\275u\371c\275\345\234:;\333k\256\273r\267\240\275\317\230\036\276\010\'\230=Z=/\275\272q\006=\324\277\371\275\203l\250<:\277v=\360\270\242<a\034\255\275[q\034\276\266\242\300=\304P\n\276\242\364w=\230\366\304\273\303\261\202=~H9>A\247V>l\310\261<5\205$\275\360T\035\275\207O\355;\247\216x<\241i\211\275\016\023\257=\361l\241\274?\365\203=\336B\271=S\375o=&G\337=\317\306t=3)\256\275\024\371x<\033\260\350\2748\024\307<\213\375p<\262\337\002\276.\235\014\276z\026\236\275\210\220v\275\375#S\275\013\216\312<M\346\233\274w\322\254=|\233\272\274%\"\224\275,\221q\2759V\344\275\251;\006\273,h\300<hg\317\273\256y\201\275\232\013\335=\003\371\315\275+\277\323=\206\346\244\274\243\000\025=\255\267\375\274w\303\210\274Y\214\204=H#\245\274\327\0360\275\202\016\263=w]\033>\335\345\005\274+\205\213=m\304K\276\007\307\t\274\225\203J=Z\200\204=i?\316\275_\020\246\275\001\217}\274^mT<\365:\247<?i\272\275\223\325]\275l\216\267=\031K\204\275\266\240\336\274Z\376\n>B\020:\276\365\033\213\275\000\312-=\374\340\022\276B\007.\2759\213Y\274\272\304\354=\215\035\245=*\030\256=\2107\027>\26273\275\'\264\360=`=e=\2445\350:\263\354&<a\377\224\276\305~\037>\220i\326\275\310]0>\246\266\021=f\321\232\2755V\t=9\322\341\273\016\346\212=;2t=\022u\227<\221\027\314\275\372\303\003=\020\216#\276O\337V=f&)=\331\334\r\275\361\022f=\236\265\300\275x\367_\275\3539\327<`J\337=q\255\266=\343\266\002=\025\340\371<\230\"\177\275\031\322\236=\261\377\221;\020[\257\275\256\333\351=\220P/>A;3=Q\206\304\274\023\246\022=(\341\304\275\240n0>\246\3022>\355\262\267<\267\325\334\275\025\021\214=\333\005}\275N\3261\275\326*v<;\370D<\264\224\005\276\2621\372\274\363*\236=\355~a=l\031\370=\235\327@\275\003\037\207<iF\211<&\226Q\276(\270\330\273\242\253\271\2757\3049<0\251\026\275\220\\\256=>,\215\275\371V<<\351\341\245\275\311\200u=$\227\337\274\267v\316\274\001\n5\275\277\016\004>\252r\352\273\307q\345<\247\241\026>A\224\331=\266\243#\276G\270\273<\025\265p\275K\327\t\275ui\243\274\010,\243\275\244/\342=\252\327\006\276\341\274H\275\227~\235\274\252R\223=\301\352G\276\227!\272<\323\013\276=\304\324y\276\232\277(<\330\243\232=r\3407=\346\334\350<l\026F<\223|\221;X\242\266\275\016\004\026\276K@k=X[\014>\200P\266\275\341\363?=z\241\221\275lS#\276zI}\275D\226\006\276\"\350P=5\343\362\274\244\"\t==\214\370<\202\267\226<9\035m\275\317\250\263\275\322\322\224\273$\000\345\275\220\373\372\275\333f\377\274\346\344\264=\2226\326\273\213\243\244=\221\374;=\354o\r\275\326BJ\275\200\027T\275]\246\233\275\255\177\017\276\361\033`\276UC:=\217\3415\276\014V\205>)\r\202\274\2667~=\021\031\332<0V\023=\223:\211=\177(\252\275\314\334\242\275X\345\320\275\276\333\"=&\027\276\275z\031\207<\375\022\245=\313VS=\010\342&\274\020\270,=\207\345\027\2756Q\232\2756~&=\365p^=\342\347\277=?\254\273\273d\017\373\275\235@*\276\346T\016>h\326b=V\027\031\274h\244<\275\274 \366\272qx\375\274\327\0311\275\220\345\234\274\352v\367=\377\031\t>\273\177H=\342\0247=Q\363\337\274!D\222\275\303&\034=K,(\275\"\375\300<So0\275\237C\267\275\'\351\303\275W\033,=\252\315\351\275hh\247\274\003\304\006=X\017\210\275H\351\222:\335\305\266;\024k^=\205\336\200\274&\316\000\274\224P^<\031I\001\275\233\203\036>p\360\366=\265\350\275\274\371\177\270={\002\216\274\206d\253\274d5\257\275=g\302\274TG\223\274|\2447\275#\243\377\275\350N\002=\027\324\';\\=\200\275\302\277\200=\324\244\361=0^\311=\253S[\275\263J\314=\256~\014<\220\227<\276v\301:=?\233\272=\2226\331\275\372g|\273~\263\r=\010\025$\275_\240I\275\214B\211\275\370\017\254\274\347\314Y\276&\024\212\274\332\332->\023\202\275=\302\r\020\276\214\311\335\275\267el\276\246m\337\274\235\305\000<\331\375r\276\363\303\177=\246\357\010\275\257\232`>\205\317\315\275\355S\363\275Y\236\007=\275\303#\275\250\212/\275q\327\002=\'\036\267=>G\005\276a\033u\275\345\275\203>d;\305=z\376\337=\006X\360\275+\270\226=%Q\275=5Q-:\230`3\274\373\330\227\274[S\340<\226\260;\274/\347\201=J\002h\275\024\205\355\272\354\242\221=\3416l>\317\210\336;\316\030\353=\237u\200\274\260\037\230<W\334u\274<\201\236\275\222\344\372<\377\277\215<\302U\251=\203\247\212\275\232\355\332=\020\213\342\275\360\334t\275\013\025\313<\213\371\213\275\323n\207\275D\365\000>\221\346\005>\177\217\321<\320\001\036=!\275\340=M\257\300\274\246:\205\273\376\030\026\275\313\376\252\274\262\250I\275\214w\215\275u\201\010\276\247\217\021<d\252\257=(\215_\274\270Es=]\334\221\275\004K^=#\014\021=\261.\276\275.\2725\275i\250\227;\230\021R>\222\005\301=\240\375\000\276\207\247\036\274\311\377M\275\272%\305=\307\216\317\275i6\262\275\006\024.\276x\023\200\275;4\244=T\3642=\372\000+:\0235\321<78g=\233@\251\275\235\200\271\275\225\'\265<_\345D\275Q\310\005>\316,8\275p\202\210=\302\325h=\244&\306\275\026\006\263:p-\'=\270\330\234\275\033\367>\274\\]\370\275\340`\210>\204\325\006\274\206\037@=X\374\336<\212\377\233<\243\343h\275\244\262m\2769\220\305\275\354\243\022\2766.4\275R\256\371\274\335#x\273\231\030H\2761D\267=\340;\201=9L1>\344\310\212=\335\365\035\2762[,>\024\217\035\274\024fV>\276\34618\255\350\370=\037\200e;/u\376\273\214E\027\276\234\254\207\274d\275/\274\021\374\254<_J\246\275\322\344\327;\310\242\243\275Nt\312=\315\212\331\275\272\275\177\275\230E\221=D\322\266\275\236\224\225=\240\324\223\275A\020\n\276\262\037\225\275\320:\366=\354L\247=@\341\230\275x\037\272=\237\016\027\275\214\033\250=\235)\021\275\305\274;=\330\213\r\276\243\001!\275\272r!\276\031b\001>V\376\203<\207x\325\275\032\260\014\276\307\010x\273-\261)>m7x;z\327\364\274_U#\275\317\230x\275-\355\337=\034|\310<^]\177;\003\254\200=\305{\330=\202\323~\275\376\232m=i\377\312\273\350\200\300\275 \002\023>J\243\010\275\'\350Z=GS\243<g6\240;E\212\010\275J\010\224<\312E\n<\3018:=\023\222\207\275dy\267\275+\n\322\274\"\301\212\275\226\367\353\274\203_;>>\232\023>\344F\253<\365\037\265=:aJ\275.\272d\275\206\336B\276\\e\372\274\032{&\276\256\275\037=K\312p=\233\341\231\275\321oe<\267\273$\275\242B\212\274\311\216\213\275~\264\201\275jO\372\275\007\034m\275\257C\246<\022\254X\274\014v0>\206\316\2347a<\323\274\005L\263\274\024\235\247\273v\303\260\275*T<\2757\373\315=\345-M<\005\351==\337\030%\2760\357^\275\340[;>\277\305\333\274N&\311=\300:\202\275\252\2351<\227.\306\275\001@\270=\266\342\331\274\252\244\002=\316\3018=<w\370\275\305\311A\276u\252\217\275\\S\003\276G\326Z<j\270\333\275\260\r@\276\n8\313<D\"\005\276\301\242O=\347\242T=\230\266l\276&c\035=P\273(\274\205\316\027\276\336\366\271\274\365\306\215\275\204>\023\275\216v~<\026rV=\014\036\347\274\311\264\317\273\316\257\310=5\001\251\275\371\234\310\275\345\341\251=H^[\273\030xy\275\324\2206>S\031p\275I&L\275?\357\277<\302\346\220\275\213\357#<\246\347\000>*\014,\275\201O\214\275\373v\335\275\312\'\221<n\210\241;\221\311\026>Y\n\036\276=\361\316\272\032%\000\273@\243\016\275ut\t=\235\356s\274XQ\374=\005\002\r>4\260\364\275\333J\035\275\024\333\332\274\335y,\275U\216\313\2751hA=\367\214J=[\020\004=8\004\317;C\260\354\275\340R\251=\204LS=\221\263\023\275\350\016.=\337\022\221\275\226\016\031\276\357\003 >\211\363:>\016Py\274\347\0145=,\306\001\276u\356\213=\2050W=\350,\341<B \n\276\"\'\017<\230\257\352<Q\214\356\274q\273~;\007\243\014\276*\004:>)\305==%nS\274\263\351\344<M\036\232<\217\302\230\2755\237\240=&\337\334=\214eT>o\rJ\275s2\204=te\010\276Y/Q\275bU\024=z0\033;\2363\202=3\300j\275\323\020\211\275\207\'\030=\311/\327\275\233\207\333\275\342\317#>\261\367\376=\213%\342=D\323\277\274\201\377\323<?\233\301=!\243\210=,\035(=\030\246\256=\337\020\022\276#yZ\274 :P\273\004l\201=J\323\301\275\271\260\217\275\236\252\213\275\347\251.>rJ\355=a\301\274<\315n\262=\326\215%>\263\243\335\274\220.\340\275\3152\211\275uj\302<\202\027\033\274\315E/<\335\007X\275K\320N\275\355\326-\275\005E\264\274A\332\320\275\210>p\275\026\204\344\275\321\377\337\2759\2672\275\205k\311<qwa=d$R=\203\200c>\026{\217>w\232\372<\274\243G>F\201\354;6?\036=3\330\361\274:\251\200\275\271\225\036\275-\213+\275\2710F\275\006\323\'=\335\3430\274\233G#>Rj\312\275D(\027\274\353n\335\274\217\204\037\274\037h\014=\270~\240=5\243\203>\212\002\376=\216N\300\274\001\206\222<\256T2=4\347\323\274\303\316\264\275a\370\367\275\005,Q=c3\240\274\351\300C>\347\275\363<\320\310\000\276&\262\242=\222\330\375<Q\223\200\275\313T\014=I=\323<\344\377^<\021\254\006>\rM\351\273\364Y\375\274*W\212=\316\310s\275LG\374\275y\265\007=^\366\227=o\300\013>Zd\253=2\252\032>\202\264\210\275\250\320\007\275X\362\231\274\211\353\325\274\254G\351=\346\324\025>u\331\3229\034\304D\274\232\227Q\275M\376\320=\345\002\246=\346L\216=\327\225W=\210\327\265=\272\035\332<\243/\354<\255\347(=\202\211\331\275\3604\255\275DD\210=F\273\246;\002\360\247\275$O\255\275\035u\327;7\206\266\275<\343\026\275 &\374\273\273\317~=\341\242\276\274\210\255s\273\371\377\214=\000Z6\275\366A\031\276\274|x\275b\275\253=(\0213\275\321\033\n=x\224#>:\323\200=\014*\021\275\035*\317<9\355!=\256\357\017\275\200>^\273v\236A\275\367\370\303<b\331\255\274\213\207f\275\333\351\303\274\014\256\257=\220eF\274A\026\316\275\364m\363;\177B\214\274\216\213\025\276\234\265\343\274\220q\t>\177\321E>:\234\337=\246\020\333=\347\213\364\274\355\243_\275\200\026Q\274\240\324!=n\177?>\334j-\275\253h\217=\326X\356=\337\225\234\275\034\\r\275v\363\342<\322\375\330\273\311|\215=a\273\344\274\031\300\014=_\212\334=\337(\360=&\t\256\2758\232l\276\315\252\227\274\261\205\">\3734M=m\325\270\274\006\006\014>\307\245\305=\265F\376\275&\252/\276\357\361&=\203eI\275\227AM=\034\341\t\276p\232\003\275\230\354\035\276}L\337=\330NH>I\235\004=\226\337\376\274\340\3132\275\0007\201\273\325\357\247\274\343\347\275=x\365>=\345!%\275\300\302\247\274\267\364\001=\336>E\276*,\266=\033m\025\276\353\n\245<\342.\204\275Y\276\203=\014c\261<4\350#>c.\207\275\232M\342=\334*+\276\036\366?=+\265\325=wc1>F\263\244\275\336\236N\274\027\315i\275\372\377\317\272X0\254=\215\355K\275\254(Q=\241t\333\275Wc\215\274\223\263\311<tE\222=\265\355D=\302\\\022>\rN\026\276 \330/\275\030\177\316;\014n\005=R\357\036=i\307\005=\265K\016>\323\265;=\303u\026\276\203t\031<8\rd>6\345b=hV\027\273\247\231b\275+YS\274|D\304=\2163\216<\273\376I=+Y\344\274z\376\260=\221\227\222=vk\217=\000\243\257\274\347\321A=\203\"3<w\211\301=n+\265\275LA)>\211\202l<!\023\272;\024\255\214\275\357\027\212\275\037\021q=\362Y\007>|\226\257\274[\334f=\r\321\216\274\332\364\000>j\311\356=\231\266\n=\370\332\233\2757\324\327=\371\247\250\274L\220?;%\022l=\243\253\246\274\230 /\272\177\236\207\274\377\343\250=\023\211K=]\361\230=\335\360\017>ca&>\177D\326=e\035\023\276\267\245V\276\331\021*=\250\274\311=\377\375\036>3\016\211\273\204Z@>\274o\354<\303\346(=\335\355\356\2748*;\276\360\300b\2738Q\270=\347b\230\275+\355\360<0\333O=\335I-\274)58<\324\376\310\275\3412\313\274\"\306\311;\372n\020\275^=\314<\\\324\335<\275]\267\275\260\332\357=\002\313n\275\371\303\376\274\245*\240\275c\001\236=]wX<[t\004=\355\366Y=\346i\252=\034^.>\331\320N\275Oe\310<U\000\311\275\214\020\303\275\346\017.\275\323\032%\274\n\237\006=\0003\007\275l0\010\276\341h!<\353J\274\275$\303\244\275\250\231\236\274er\325</E\n=O\0238\275\315\354u\274\236\233*\274|\027\257=\320r\311=n}X\274\303\245\366\275\022\346\333=\222 \207=m\244\247\275A\030!<\032<\252<\302\222\027>\347\305\373=\246\251\237\275\271\201\211\2740n>>q#\0267\325\261@\276\026\353\261\275>\322A\276\237hw<3\375s\274fMj=\306r\201=\016\204\331<\320\230\207\2753B\022\274\037\375\240<\025\224e>\342\253\365\275\332\354\033=\225\221\274\275\323\375Q>9\375\335:s\270(\276UE#=\257\273\202\275\025x\263=;\226\006=\356\342^>\\ \256=~\270\002\276WDJ\275\327\2022<p\036\213=<$\320<8\371\227=\253o\211\273\356S~=\355\036\204=\317\303\230\275\254\365\277=\350\212c=+\274\244\274\365\\\345\2740\232t=\352\031`=\031\274\362<&\265f\275\024q\266\274\214\374W=b\332\256\275\215@\016\275m\263\374=Uz\213\275\031\307b\275\344\204\t\276\030\377\204\274\374\206\341\274CX4\275b\202\023=[@\307\274w\224\"\276\364>\327=\214\345\000\276\257\031S<;q\252\275\323\001\303<L\357\227\275\223I\021>\207\031\030=Xu\037\275\246\264 >\001\003g>6\016l\276\0002\254\274\366\201\267\274\235\236\307<k\266a\274\262\377\234\2745f\273=\231\321\225\275<\0324>\334\371\230\275\037\331\214<\335:\212\275\3374\003\275\203\213\325\2753JK\274\277\030\314=\365\017\265\275\210\335\007\276\313\\}\275\355\367f>\261\361\264=g\367#>\321\321\220\274\177@\275<\004P\266<b\236\237=\341a_<\024\350\024\276\223%V\276#$\373<\270fb\275\036\214\261\275\007\005\010<\247\342\327\274\267\r\367=\005\0274\272\240N\003\275\212H\201<\256t\222=\345\270\343\275\354E\005\276\324U:\275\242\347\255<w\034#=C\317\001\275\333\256\350\274\360\277\256\273\275\234G=\306\204\250\274\350\237j=\201 ^<5m\227<DM\302=l_T=b)\223>\3263@\275\333U6\275f\327\265<\307C\311=\341\303k=q\010:>\264\347\360=\031\360\232=j\326E<\330}\213=\310\245q<\326\333\002\275 \214\231=\022?\357< \213C>\177vD=\220\334\351\275\240\nD=\200,\267<\324\261\333\275\355\223\306\273U\305\312=/\317\014\275A\3365\276\255\224\226\275\374\234\032;z\201\373<a\323\001\276Z~^\275\016\217\240\275\0316\376\275C\016\"\275-P\357\275\037\346\376<x\332\344\275(j\251\275\3633\330\275\014\2030\275\211\244\320\275c5_\274\'\306\037\2764\0163< \357\374\274\013x\031\275-\374\240=$\232\303\274\214\272\204\275\232.\342\273wT\034<\340\322C\275\225\005\207>\316\177\317\274Z\206\272;y\275W=\353:\236\275L\254\r=\235\2542\275\354\347\343=\304PO=\3006\372=\306l\231\274\260c\326=\026\002\246;Q\277=\274U\326!=\3775 \275\021\311\307\274pTK=\021\243\020>\031\317V\275\031\303f\275\354lk<\300\000o<k\243q>\225\010\311\274\000\231\327=\230\316\241=B/\206\274\024\237\275\275\353\326)\275\354!.\276\315\030M\275K\020A\275\3644r;\017\027I=\351n\\\274%(G\276\264\236\312\275\316\211\033<\251\355\366=\215\3024=\235\356\025=\010t8>@\013\366=\3724\014\276N\315\266\275\323\307\202\275\326\350\r\276}\276\317\275\331\273\340=\2459\021\275\334p=\274`\374\003\2766kg=3\267\226\275\3607\346\274F\300\335<\370\254%>I|\200=\326\024,\275I\2133=\2313\352<\334\353[\274\306wT=R\305\340\275\244\271_\274\260\302\233=\035\003\010\275Z\2414<\273\263\210\274\3414\003\276\205\271\020\276\\\236h\2756K\317=\361\337\340=\177GV;\223tU>Y\227\335\275\341\340\266=\305\317\253=\234q\247<\235^\257=%j\243\274\260\000\205=\275X\356<s\200}\275\272\360\312=\216e\222\275\013\320\245\275HM><\020\255\t=KR\r>,\244!=\036C\027=*\"\241<7\362\223\275\'\023O\276\216.\014\275\007\234\337<\222[\314\275\017do\275\221\2645\276#\326\346\275\314, >{\245\013=?\020W\275%\307\215=g\254\360\274\350\343.>0\006\270\275\3559\340;\356\363\027\275WN\362\274\005(\265\275\030;\246\275 \033\301\275\323-M\275#\n_<\201T\007\275\277ti=?T/\265K\276\r\274\316d\347\275\317\277~:\000\"\235\275\241\2059\276\207w\254\273{\004y\275\331\010$=\300\376\232=\300\001\032\27674*=r7>>\177\265R=\177\266\217\275Q\004\267=6\016v\2754{\245=\255]P<\342\214\002\275\n\n\266\274C\005\375<\214\321\022=\031\201\275=\305\227\236;\352\244\242\275\361\346\010<\327*8\274\255\310\310=\224\246l=\343\200W=u\302\023\276P\003\026<\312g\"\276oz\207<\3123\177=+)\303=\207\337\003>\236N\235\275\363\235,\275\003)\337<\004J\363\274t\272*=UC\022\276\256l\320\273t\2208=XCP=\016R\271\274$6\211=\365M|\275\002G\005>\276\200\374\275\224\277\354=LK\265\272f\352\301\275hb\205=\003\"\243\275\022bN<\335\304\013\276\265\215\013=\375\310\370\274\225(\250\275\tG\255\274k\251\344=\031\356\036\276\376\316\027\276\200\372h;\336\255\005>\253~6\275\020\373\304=\307\t\343=\351\340w\274e~>\274b@q\275\217T\311=>\365\300=\214g4=\247\314N\275\353\313q\276\032\255\301=\273\020\017\276\010\203d\275\257i\003\276\264x\275=\371w\302<)W\\=\227O]\275\264\337\230;\002\371\334\273\202\014Z<\214q%>\366\310\224\275s%\351\2744\003\'>\317\274\025\275\335\225\305\275L\314\246\275\315\274 >_!\316=*a\010>\220Od\275\333\264\005=\r,4>\206\345\210=C\272?\275\207\350\250\275JP0\276x4V=\033\217\244\275\246\272\353\275O\327u=9\002!>\202\306\357\275\273\260\310= \034\263=\237*Z<\205\330\212\275\001\344\233\275\210\004v\275\317\014\"\274\273=\213=\262I\177={\003\371\274\026\304(=\262w\200\2757yy\275\216\035\213=\376\320\354\275\362W\216=\304\365r\276\203\206\177=\266\313\000<|t\033=Qd\033=\024\203\226\274\270\351^=\374\262\237=\3064P=F3\234\274\355\250\264\275\017{\037\276L}d\275\000>\267<\235\364\020\276\033d\200\275\016y\354<6jy=C\007\'=\210\r\361=p]\311\2747;\307\272\364\006S\274,\230\245\275\231/1=%\242\256=@p\302\274~\3456>*=\374\274\225\202->i\213\254\274\326`4>\216a$>x\010\232\2750\327y>\367\001\360\274\325\221\030;Xw\206\275PH\225\275OY\013>\317q\346\275s\277\340\275\236\311\003>\'p\245=\n\214\t\275\177O \275\216f\364\275\361H\331\274\313\356\225=\257\004\345<\261\374\311\275G\006\017\275\003dj\276\300\016r=\332\027\253\274\026\335\370\275\005\213*><\370\001\276\345e\257\273\263\010g\275H\300\277<\372\031\274=\274W\371<\005\027\245=\305\216\035\275\n\010y\275\305\370\211\275\274\243\262=&\276\303<.(\216=\310\362j=\010v\026>P\265\376=\003\346[\274\317!\030>\342\027\007>\337v#=QFE<\212\244\231=\240J\207\275\251i\3309%\"V<t\317\310\273{wH>\202\342(=\225\246\264\275\275\214\214\274\252\263\307=\230\tC<\200\214\347\273f:\016\276\276\375\201<\373?\310=\367\221W\274.\350\212\275\277\022X\275t\300\204=\273\225e=\371\205\211<\016\330\001<`\240\350\273\201\006\207<\216n\035\276^k\035>\207\321\022>D\010\337\273\236R\017\275\375:\303\275\016G\306=\341b\374=\274\027\212\275\247\274\354\275s\252\203\275@S\334\273\234R\332\274\332\2175\275G\331\246<\363\035\"\276S\211\020>C\270\274=\263B\273\274r\0142=\025\335\277\275\254\314\332\274\261\2221\275\344\0256\276\344\367\316\273\260\271\206=\311\362%\274_\230[=\357b\256\274\363\374\203\274=_\323\274p\206^\276\0242\030=\354\035\302\275e\246\311\274K\305\273=\261\\\014\276 \305H\275\021\310\310\275\023\266e\275\307Yz=\177H\334:\324\361l\274\017*\004\276_}\305<\343\304\262=\331\033\032\275d8\230<\371g\224\275Z&J\275\361rX\275*\227\340\275\275\356\003=\217N\234=)]V\275\003\r\000\275\210~0\275\3124\220=]\274\\\275a]\205\275\212?O=\033\266\t\276QT\006>?\302\377\275\014l\260\273)_\013\274V\303\010<\260\375\000\276\351\342\035=\341:/=\306\231\323;\007,g=s\352\337\275\266=\202=5\264\001>\363\\\246\275ibP;ht\231\275\235\217E>\227\247\257=\233\324u\272\004i\002\276u\267\233\275\264\361`=}\361\253=\340Y\022\276Q\\l\275z]Q\275}\257\210\275\352\342\001=7%\226\274`\374\357=\200XT>\303\227*<\310=\232=\337..=P\1779\276\206@\256\275\360\014\031=Sh~\275\224\227m\274\226\2448=\2549\273<Q\372%\274\256*]>\221f\"\276+\220\307=\344\267\207=y\236\336=QTT=\215\004\224\274[a\">>\340\026\275\303\3045=\230\364\342\275BQ^\274\330\266\013>\232\354k<_\003\323=Y\210\010\276T\213\000\276\304ZN\274\007\274\243=e}\003\276\243\342i\275wA\342\274\211\331\325\273\334*\027\276c\366\357<\371\366J\276\240\017\232\275u#\013>\303z@=\207-\367=\240\220\234=\036\374\307=G8\257=\034\027M=k\323V=\357\005\256\275"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 27
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\033\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape"
  op: "Reshape"
  input: "lstm_2_input"
  input: "lstm_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/Reshape"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\005\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_1"
  op: "Reshape"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\033\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_2"
  op: "Reshape"
  input: "lstm_2_input"
  input: "lstm_2/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/Reshape_2"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\005\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_3"
  op: "Reshape"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\033\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_4"
  op: "Reshape"
  input: "lstm_2_input"
  input: "lstm_2/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/Reshape_4"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\005\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_5"
  op: "Reshape"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\033\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_6"
  op: "Reshape"
  input: "lstm_2_input"
  input: "lstm_2/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/Reshape_6"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\005\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Reshape_7"
  op: "Reshape"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_2/concat_1"
  op: "ConcatV2"
  input: "lstm_2/Reshape_1"
  input: "lstm_2/Reshape_3"
  input: "lstm_2/Reshape_5"
  input: "lstm_2/Reshape_7"
  input: "lstm_2/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_2/concat_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_14"
  op: "StridedSlice"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_14/stack"
  input: "lstm_2/strided_slice_14/stack_1"
  input: "lstm_2/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_15/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_15/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_15/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_15"
  op: "StridedSlice"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_15/stack"
  input: "lstm_2/strided_slice_15/stack_1"
  input: "lstm_2/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_16"
  op: "StridedSlice"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_16/stack"
  input: "lstm_2/strided_slice_16/stack_1"
  input: "lstm_2/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_17"
  op: "StridedSlice"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_17/stack"
  input: "lstm_2/strided_slice_17/stack_1"
  input: "lstm_2/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/Tile"
  input: "lstm_2/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/mul"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/strided_slice_14"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/Tile"
  input: "lstm_2/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/mul_2"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/strided_slice_15"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/mul_3/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_3"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/Tile"
  input: "lstm_2/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/mul_5"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/strided_slice_16"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_6"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/mul_7"
  op: "Mul"
  input: "lstm_2/Tile"
  input: "lstm_2/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/mul_7"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/strided_slice_17"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_8"
  op: "Mul"
  input: "lstm_2/mul_8/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_8"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_9"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/strided_slice/stack"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice/stack_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice/stack_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/strided_slice/stack"
  input: "lstm_2/while/strided_slice/stack_1"
  input: "lstm_2/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_1/stack"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_1/stack_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_1/stack_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/strided_slice_1/stack"
  input: "lstm_2/while/strided_slice_1/stack_1"
  input: "lstm_2/while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_2/stack"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_2/stack_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_2/stack_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/strided_slice_2/stack"
  input: "lstm_2/while/strided_slice_2/stack_1"
  input: "lstm_2/while/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_3/stack"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_3/stack_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_3/stack_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/while/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/strided_slice_3/stack"
  input: "lstm_2/while/strided_slice_3/stack_1"
  input: "lstm_2/while/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/while/mul/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/strided_slice"
  input: "lstm_2/while/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/strided_slice_1"
  input: "lstm_2/while/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/mul_3/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_3"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/strided_slice_2"
  input: "lstm_2/while/MatMul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_6"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_7"
  op: "Mul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/mul_7"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/strided_slice_3"
  input: "lstm_2/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_8/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_8"
  op: "Mul"
  input: "lstm_2/while/mul_8/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_8"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_9"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_9"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_9"
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.42640143632888794
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.42640143632888794
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5426889
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "lstm_2/TensorArrayReadV3"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 27
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "lstm_2/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_2/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_2/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
}
node {
  name: "iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "iterations/Assign"
  op: "Assign"
  input: "iterations"
  input: "iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "iterations/read"
  op: "Identity"
  input: "iterations"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@iterations"
      }
    }
  }
}
node {
  name: "lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lr/Assign"
  op: "Assign"
  input: "lr"
  input: "lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lr/read"
  op: "Identity"
  input: "lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lr"
      }
    }
  }
}
node {
  name: "beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta_1/Assign"
  op: "Assign"
  input: "beta_1"
  input: "beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta_1/read"
  op: "Identity"
  input: "beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_1"
      }
    }
  }
}
node {
  name: "beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta_2/Assign"
  op: "Assign"
  input: "beta_2"
  input: "beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta_2/read"
  op: "Identity"
  input: "beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_2"
      }
    }
  }
}
node {
  name: "decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decay/Assign"
  op: "Assign"
  input: "decay"
  input: "decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decay/read"
  op: "Identity"
  input: "decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decay"
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "dense_2/BiasAdd"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Abs"
  op: "Abs"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Abs"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Mean_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Mean"
  input: "Mean_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "Mean_1"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "Cast"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "mul"
  input: "Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3"
  op: "Mean"
  input: "truediv"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "mul_1/x"
  input: "Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: "beta_1"
        string_val: "beta_2"
        string_val: "decay"
        string_val: "dense_2/bias"
        string_val: "dense_2/kernel"
        string_val: "iterations"
        string_val: "lr"
        string_val: "lstm_2/bias"
        string_val: "lstm_2/kernel"
        string_val: "lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta_1"
  input: "beta_2"
  input: "decay"
  input: "dense_2/bias"
  input: "dense_2/kernel"
  input: "iterations"
  input: "lr"
  input: "lstm_2/bias"
  input: "lstm_2/kernel"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta_1"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta_2"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta_2"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decay"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decay"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense_2/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense_2/bias"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "dense_2/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dense_2/kernel"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "iterations"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "iterations"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "lr"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "lr"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "lstm_2/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "lstm_2/bias"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "lstm_2/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^iterations/Assign"
  input: "^lr/Assign"
  input: "^beta_1/Assign"
  input: "^beta_2/Assign"
  input: "^decay/Assign"
}
versions {
  producer: 24
}
